#복잡도, 시간복잡도 : 알고리즘 개발에서 굉장히 중요하다.
#ex) 숫자를 더하는 프로그램
#복잡도를 알아야하는 이유 : 컴퓨터는 생각보다 느리기 때문에
# x + 1 << 덧셈 횟수가 1번이다라고 의미함.
x = 10
print(x + 1)

#리스트 내부에 있는 요소를 더하는 프로그램
#아래 코드에서 덧셈횟수는 반복문(A의 리스트)이 3번 돌기때문에 덧셈이 3번 이루어질 것이다.
A = [1,2,3]
output = 0
for a in A:
    output += a
print(output)

#2차원 배열(리스트)의 요소를 더하는 프로그램
#덧셈은 4번 이루어진다.
A = [[1,2], [3,4]]
output = 0
for 리스트 in A:
    for i in 리스트:
        output += i
print(output)

#숫자가 증가하는 비율에 영향을 주는 것은 최고차 항 뿐이다.

#알고리즘의 복잡도를 표기하는 방법이다.(4분~)
#점근표기법, 빅오 표기법, 란다우 표기법
#계산 횟수를 n으로 하는 식이 나왔을때, 최고차항을 제외한 나머지 항을 제외하고
#최고차항을 남기고 최고차 항의 계수를 제거하면, 밑에 점근표기법으로 구현된 식이 나온다.
# 10n^2 + n >> 0(n^2)
# n^2 + 1 >> 0(n^2)
# 5n > 0(n)
# 0(n)
# 0(1)
#최고차 항이란
#n! + n^2 + nlogn + 1 >> 0(n!)

#구글에 graph algorithm complexity를 검색해보면 Codenza의 Time&Space Complexity for
# Graph가 나온다. 참고로 그래프 알고리즘은 E log V처럼 표기되는디
# "Edge_개수 log Vertex_개수"라서 대충 n log n이다 생각해도 된다.
#복잡도는 최선 복잡도, 평균 복잡도, 최악 복잡도로 구분되는데 평균복잡도만 생각하면 된다.