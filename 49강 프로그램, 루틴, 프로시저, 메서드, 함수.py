#함수 관련 기본 용어
#program의 pro : 미리 또는 앞으로 ex) prophet : 미리 + 말하는 것 = 예언자, proceed : 앞으로 + 가다 = 나아가다
#program의 gram : 작성된 것 ex) instagram : 즉시, 즉석으로, 바로, 순간 + 작성한 것, program : 미리 작성된 것
#program : 루틴(routine), 절차(procedure), 방법(method)
#코드 전체 : 프로그램, 루틴

#서브프로그램과 서브루틴 전용 문법
#변수 = {KEY : VALUE, KEY1 : VALUE1}
케이크 = {"이름": "초코 케이크", "남은 무게": 300}
def 이름(먹을양):
    print(f"케이크를 {먹을양}g 만큼 자르고")
    print("케이크를 먹는다")
    케이크["남은 무게"] -= 먹을양
    print(f"남은 케이크의 무게는 {케이크['남은 무게']}입니다.")
#위의 코드는 매개변수(parameter)
# 먹을양 = 50, 100 위 def 이름()에 (먹을양)으로 해놓고 이 코드 한줄을 삭제 << 깔끔하게 하기 위해
이름(50)
이름(100)
#위의 이름은 절차(procedure)임

# f(x) = x^2 + 2x + 1
output = 0
def f(x):
 output = x ** 2 + 2 * x + 1
f(10)
print(output)
f(20)
print(output)
# 파이썬은 위 코드들이 위험하다고 판단하여 문법적으로 허용하지 않는다. 이유는 서브루틴(서브프로그램)을 동시에 실행할 수 있는
# 코루틴(co + routine)이라는 문법이 있는데, 코루틴으로 동시에 외부의 변수에 접근해서 값을 변경하면 충돌이 날 수 있기 때문이다.
# 그래서 함수가 태어났다.

#함수
#f(x) = x^2 + 2x + 1
#함수 : 수학에서 가져온 용어
#f(x) 코드 자체가 값이 될 수 있게
#프로시저 + "리턴 값"
def f(x):
    return x ** 2 + 2 * x + 1
print(f(10))
print(f(20))

#코드 명칭 : 프로그램, 루틴 + 프로시저, 메서드
#작은 코드 : 서브프로글매, 서브루틴 + 프로시저, 메서드
#매개변수를 갖는 서브프로그램/서브루틴 : 프로시저(procedure)
#리턴값을 갖는 프로시저 : 함수(function)
#클래스 내부에 있는 함수 : 메서드(method)

#ADA : 프로시저 문법과 함수 문법이 완전히 분리!
#현대적인 프로그래밍 언어와 파이썬 : 함수로 통합